name: On Commit Action

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  my_job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Changed files (Push)
        if: github.event_name == 'push'
        run: |
          if [[ $(git rev-list --count HEAD) -gt 1 ]]; then
            echo "Changed files:"
            git diff-tree --no-commit-id --name-only HEAD^..HEAD
          else
            echo "Initial commit:"
            git show --name-only HEAD
          fi

      - name: Changed files (Pull Request)
        if: github.event_name == 'pull_request'
        run: |
          echo "Changed files (PR):"
          git diff-tree --no-commit-id --name-only ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }}

      - name: Add new tag
        uses: paulhatch/semantic-version@v5.4.0
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change, supports regular expressions wrapped with '/'
          major_pattern: "(MAJOR)"
          # A string which indicates the flags used by the `major_pattern` regular expression. Supported flags: idgs
          major_regexp_flags: ""
          # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
          minor_pattern: "(MINOR)"
          # A string which indicates the flags used by the `minor_pattern` regular expression. Supported flags: idgs
          minor_regexp_flags: ""
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # Optional path to check for changes. If any changes are detected in the path the
          # 'changed' output will true. Enter multiple paths separated by spaces.
          change_path: "src"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true
          # If bump_each_commit is also set to true, setting this value will cause the version to increment only if the pattern specified is matched.
          bump_each_commit_patch_pattern: ""
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: true
          # The output method used to generate list of users, 'csv' or 'json'.
          user_format_type: "csv"
          # Prevents pre-v1.0.0 version from automatically incrementing the major version.
          # If enabled, when the major version is 0, major releases will be treated as minor and minor as patch. Note that the version_type output is unchanged.
          enable_prerelease_mode: false
          # If enabled, diagnostic information will be added to the action output.
          debug: true
          # If true, the branch will be used to select the maximum version.
          version_from_branch: true          
